"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""" Experimental stuff to play with later
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

nnoremap <leader><leader> <c-^> " switch to alternate / last file in buffer

:nnoremap Q <Nop> " not go into ex mode when i press q


"script currently works but has flaws. currently asks for password to save.
"ideally pwd gets saved at open and gets re-used at save and then cleard.
"

"don't save backups of *.gpg files
set backupskip+=*.gpg
" To avoid that parts of the file is saved to .viminfo when yanking or
" deleting, empty the 'viminfo' option.
set viminfo=

augroup encrypted
  au!
  " Disable swap files, and set binary file format before reading the file
  autocmd BufReadPre,FileReadPre *.gpg
    \ setlocal noswapfile bin
  " Decrypt the contents after reading the file, reset binary file format
  " and run any BufReadPost autocmds matching the file name without the .gpg
  " extension
  autocmd BufReadPost,FileReadPost *.gpg
    \ execute "'[,']!gpg --decrypt --default-recipient-self" |
    \ setlocal nobin |
    \ execute "doautocmd BufReadPost " . expand("%:r")
  " Set binary file format and encrypt the contents before writing the file
  autocmd BufWritePre,FileWritePre *.gpg
    \ setlocal bin |
    \ '[,']!gpg -c
    "\ '[,']!gpg --encrypt --default-recipient-self
  " After writing the file, do an :undo to revert the encryption in the
  " buffer, and reset binary file format
  autocmd BufWritePost,FileWritePost *.gpg
    \ silent u |
    \ setlocal nobin
augroup END



" rename current file
function! RenameFile()
	let old_name = expand('%')
	let new_name = input('New file name: ', expand('%'), 'file')
	if new_name != '' && new_name != old_name
		exec ':saveas ' . new_name
		exec ':silent !rm ' . old_name
		redraw!
	endif
endfunction
map <leader>n :call RenameFile()<cr>



"""""" MULTIPURPOSE TAB KEY
" Indent if we're at the beginning of a line. Else, do completion.
function! InsertTabWrapper()
	let col = col('.') - 1
	if !col || getline('.')[col - 1] !~ '\k'
		return "\<tab>"
	else
		return "\<c-p>"
	endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>



augroup vimrcEx
	" Jump to last cursor position unless it's invalid or in an event handler
	autocmd BufReadPost *
	\ if line("'\"") > 0 && line("'\"") <= line("$") |
	\   exe "normal g`\"" |
	\ endif

	"for ruby, autoindent with two spaces, always expand tabs
	autocmd FileType ruby,haml,eruby,yaml,html,javascript,sass,cucumber set ai sw=2 sts=2 et

	" Leave the return key alone when in command line windows, since it's used to run commands there.
	autocmd! CmdwinEnter * :unmap <cr>
	autocmd! CmdwinLeave * :call MapCR()
augroup END


"""""" OPEN FILES IN DIRECTORY OF CURRENT FILE
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>e :edit %%
map <leader>v :view %%




"""" plugin stuff


" pathogen lines
" source ~/.vim/bundle/vim-pathogen/autoload/pathogen.vim
" source ~/.vim/autoload/pathogen.vim
execute pathogen#infect()

filetype off
filetype plugin indent off
set runtimepath+=/usr/local/go/misc/vim
filetype plugin indent on

"filetype plugin on " detect filetypes.. commented out because turned on above
let g:airline_powerline_fonts = 1 " necessary powerline code
let g:airline#extensions#tabline#enabled = 1


" autocmd line
autocmd!


""""""" git-gutter "
"let g:gitgutter_sign_column_always = 1
highlight clear SignColumn
set updatetime =1000




"" instant markdown Lines" sets so that instant markdown will work
"set shell=bash\ -i
"set shell=/usr/local/bin/bash



"" This is pretty cool. it lets you use syntax hilighting in a file that has a different extension for some reason.
"set any _bashrc to shell syntax
autocmd BufNewFile,BufRead * if expand('%:t') =~ 'bashrc' | set syntax=zsh | endif
autocmd BufNewFile,BufRead * if expand('%:t') =~ '.vim' | set syntax=zsh | endif




"""""" Visual Settings
" Display extra whitespace.. or in other words, show when you have bad white space at the end of a line
" set list listchars=tab:>-,trail:·
" Display trailing whitespace
" set list listchars=trail:·
" set list listchars=tab:»·,trail:·

" this needs to be fixed! "TODO!
"set list listchars=tab:  ,trail:·,extends:>,precedes:<,nbsp:%


" when uncommented this switched between light and dark depending on time
"let hour = strftime("%H")
"if 6 <= hour && hour < 17
"	set background=light
"else
	set background=dark
"endif
